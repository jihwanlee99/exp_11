module DAC(clk, rst, btn, add_sel, dac_csn, dac_ldacn, dac_wrn, dac_a_b, dac_d, led_out);
input clk, rst;
input [5:0] btn;
input add_sel;
output reg dac_csn, dac_ldacn, dac_wrn, dac_a_b;
output reg [7:0] dac_d;
output reg [7:0] led_out;
// reg에서는 데이터 저장가능

reg [7:0] dac_d_temp;
reg [7:0] cnt;
wire [5:0] btn_t;

reg [1:0] state;

parameter DELAY = 2'b00,
		   SET_WRN = 2'b01,
		   UP_DATA = 2'b10;
		   
oneshot_universal #(.WIDTH(6)) U1(clk, rst, {btn[5:0]}, {btn_t[5:0]});
// 6개의 버튼을 사용할 것이며 해당 버튼들은 원샷 트리거를 거쳤다.

always@(posedge clk or negedge rst) begin
	if(!rst) begin
		state <= DELAY;
	end
	else begin
		case(state)
			DELAY : if(cnt == 200) state <= SET_WRN;
			SET_WRN : if(cnt == 50) state <= UP_DATA;
			UP_DATA : if(cnt == 30) state <= DELAY;
			endcase
	end
end
// 조건에 따라 state를 변경하는 코드

always@(posedge clk or negedge rst) begin
	if(!rst) begin
		cnt <= 0;
	end
	else begin
		case(state)
			DELAY : 
				if(cnt>=200) cnt <= 0;
				else cnt <= cnt + 1;
			SET_WRN :
				if(cnt>=50) cnt <= 0;
				else cnt <= cnt + 1;
			UP_DATA :
				if(cnt>=30) cnt <= 0;
				else cnt <= cnt + 1;
		endcase
	end
end
// state 이동을 위한 카운트 값을 증가시키는 코드

always@(posedge clk or negedge rst) begin
	if(!rst) begin
		dac_wrn <= 1;
	end
	else begin
		case(state)
			DELAY : dac_wrn <= 1;
			SET_WRN : dac_wrn <= 0;
			UP_DATA : dac_d <= dac_d_temp;
		endcase
	end
end
// DELAY(2'b00 : WR핀의 값을 1로 원상복귀
// SET_WRN(2'b01 : write input핀 동작을 위해 값을 0으로 바꿔주는 state)
// * WR이 0이 되어야, 변경된 디지털 input 값을 반영
// UP_DATA(2'b10 : dac input에 값을 넣어준다)

always@(posedge clk or negedge rst) begin
	if(!rst) begin
		dac_d_temp <= 8'b0000_0000; // 0
		led_out <= 8'b0101_0101; // 85
	end
	else begin
		if(btn_t == 6'b100000) 		dac_d_temp <= dac_d_temp - 8'b0000_0001;  // (-1)
		else if(btn_t == 6'b010000) dac_d_temp <= dac_d_temp + 8'b0000_0001; // (+1)
		else if(btn_t == 6'b001000) dac_d_temp <= dac_d_temp - 8'b0000_0010; // (-2)
		else if(btn_t == 6'b000100) dac_d_temp <= dac_d_temp + 8'b0000_0010; // (+2)
		else if(btn_t == 6'b000010) dac_d_temp <= dac_d_temp - 8'b0000_1000; // (-8)
		else if(btn_t == 6'b000001) dac_d_temp <= dac_d_temp + 8'b0000_1000; // (+8)
	//	else dac_d_temp <= dac_d_temp;
		led_out <= dac_d_temp;
	end
end
//버튼을 눌렀을 때 dac_d_temp값을 변화시키는 코드

always@(posedge clk) begin
	dac_csn <= 0;
	dac_ldacn <= 0;
	dac_a_b <= add_sel; // 0 : Select A, 1 : Select B
end
//제어에 필요한 값들을 넣고 output selector에 원하는 값을 넣는 코드

endmodule
